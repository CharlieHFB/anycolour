{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SeachBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","Tracklist","tracks","map","id","SearchResults","TrackList","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","console","log","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorisation","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","response_1","jsonResponse_1","playlistId","header","uris","App","playlistName","updatePlaylistName","find","savedTracks","push","filter","currentTrack","then","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAAIA,E,iGCiCWC,E,kDA7BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,KAAM,IAGV,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBART,E,0CAWnB,WACIE,KAAKN,MAAMO,SAASD,KAAKL,MAAMC,Q,8BAGnC,SAAkBM,GACdF,KAAKG,SAAS,CAACP,KAAMM,EAAME,OAAOC,U,oBAGtC,WACI,OACI,sBAAKC,UAAU,YAAf,UACI,uBAAOC,SAAUP,KAAKD,iBAAkBS,YAAY,mCACpD,wBAAQC,QAAST,KAAKH,OAAQS,UAAU,eAAxC,2B,GAxBQI,IAAMC,WCqCfC,G,wDAnCf,WAAYlB,GAAQ,IAAD,8BACf,cAAMA,IACDmB,SAAW,EAAKA,SAASf,KAAd,gBAChB,EAAKgB,YAAc,EAAKA,YAAYhB,KAAjB,gBAHJ,E,gDAMf,WACI,OAAIE,KAAKN,MAAMqB,UACJ,wBAAQT,UAAU,eAAeG,QAAST,KAAKc,YAA/C,eAEA,wBAAQR,UAAU,eAAeG,QAAST,KAAKa,SAA/C,iB,sBAIf,WACIb,KAAKN,MAAMsB,MAAMhB,KAAKN,MAAMuB,S,yBAGhC,WACIjB,KAAKN,MAAMwB,SAASlB,KAAKN,MAAMuB,S,oBAGnC,WACI,OACI,sBAAKX,UAAU,QAAf,UACI,sBAAKA,UAAU,oBAAf,UACI,6BAAKN,KAAKN,MAAMuB,MAAME,OACtB,8BAAInB,KAAKN,MAAMuB,MAAMG,OAArB,OAAiCpB,KAAKN,MAAMuB,MAAMI,YAErDrB,KAAKsB,sB,GA9BFZ,IAAMC,YCkBXY,G,kKAjBX,WAAU,IAAD,OACL,OACI,qBAAKjB,UAAU,YAAf,SAEQN,KAAKN,MAAM8B,OAAOC,KAAI,SAAAR,GAClB,OAAO,cAAC,EAAD,CAAOA,MAAOA,EAEjBD,MAAO,EAAKtB,MAAMsB,MAClBE,SAAU,EAAKxB,MAAMwB,SACrBH,UAAW,EAAKrB,MAAMqB,WAHjBE,EAAMS,a,GAPfhB,IAAMC,YCafgB,G,kKAZX,WACI,OACI,sBAAKrB,UAAU,gBAAf,UACI,yCACA,cAACsB,EAAD,CAAWJ,OAAQxB,KAAKN,MAAMmC,cACtBb,MAAOhB,KAAKN,MAAMsB,MAClBD,WAAW,W,GAPPL,IAAMC,YC2BnBmB,G,wDA1BX,WAAYpC,GAAQ,IAAD,8BACf,cAAMA,IAEDqC,iBAAmB,EAAKA,iBAAiBjC,KAAtB,gBAHT,E,oDAMnB,SAAiBI,GACbF,KAAKN,MAAMsC,aAAa9B,EAAME,OAAOC,S,oBAGzC,WACI,OACI,sBAAKC,UAAU,WAAf,UACI,uBAAO2B,aAAgB,eACnB1B,SAAUP,KAAK+B,mBACnB,cAACH,EAAD,CAAWJ,OAAQxB,KAAKN,MAAMwC,eAC1BhB,SAAUlB,KAAKN,MAAMwB,SACrBH,WAAW,IACf,wBAAQT,UAAU,gBAAgBG,QAAWT,KAAKN,MAAMyC,OAAxD,oC,GAnBOzB,IAAMC,Y,uBLCvByB,EAAU,CACZC,eADY,WAGR,GADAC,QAAQC,IAAI,SACR/C,EACA,OAAOA,EAGX,IAGMgD,EAAmBC,OAAOC,SAASC,KAAKC,MAH7B,wBAIXC,EAAiBJ,OAAOC,SAASC,KAAKC,MAH3B,sBAKjB,GAAIJ,GAAoBK,EAAgB,CACpCrD,EAAcgD,EAAiB,GAC/B,IAAMM,EAAYC,OAAOF,EAAe,IAIxC,OAFAJ,OAAOO,YAAW,kBAAMxD,EAAc,KAAgB,IAAZsD,GAC1CL,OAAOQ,QAAQC,UAAU,eAAgB,KAAM,KACxC1D,EAEP,IAAM2D,EAAS,2DAzBV,mCAyBU,0EAxBP,yBAyBRV,OAAOC,SAAWS,GA0BpBtD,OAhDM,SAgDCD,GAAO,OAAD,qHACTJ,EAAc4C,EAAQC,iBADb,SAEQe,MAAM,kDAAD,OAAmDxD,GAAQ,CACnFyD,QAAS,CACLC,cAAc,UAAD,OAAY9D,MAJlB,cAET+D,EAFS,gBAOYA,EAASC,OAPrB,WAOTC,EAPS,QAQGjC,OARH,yCASJ,IATI,gCAWRiC,EAAajC,OAAOkC,MAAMjC,KAAI,SAAAR,GAAK,MAAK,CAC3CS,GAAIT,EAAMS,GACVP,KAAMF,EAAME,KACZC,OAAQH,EAAM0C,QAAQ,GAAGxC,KACzBE,MAAOJ,EAAMI,MAAMF,KACnByC,IAAK3C,EAAM2C,SAhBA,+CAmDbC,aAnGM,SAmGO1C,EAAM2C,GAAY,OAAD,2HAC3B3C,GAAS2C,EAAUC,OADQ,wDAK1BvE,EAAc4C,EAAQC,iBACtBgB,EAAU,CAAEC,cAAc,UAAD,OAAY9D,IANX,SAST4D,MAAM,gCAAiC,CAAEC,QAASA,IATzC,cAS1BE,EAT0B,gBAULA,EAASC,OAVJ,cAU1BC,EAV0B,OAWhCO,EAASP,EAAa/B,GAXU,UAaP0B,MAAM,oCAAD,OAAqCY,EAArC,cAC1B,CACIX,QAASA,EACTY,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEjD,KAAMA,MAjBL,eAa1BkD,EAb0B,iBAoBHA,EAAWb,OApBR,eAoB1Bc,EApB0B,OAqB1BC,EAAaD,EAAe5C,GArBF,UAsBnB0B,MAAM,oCAAD,OAAqCY,EAArC,sBAAyDO,EAAzD,WAA8E,CAC5FC,OAAQnB,EACRY,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEK,KAAMX,MAzBD,yFA8BzB1B,IMlDAsC,E,kDA1Eb,WAAYhF,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXkC,cAAe,GACf8C,aAAc,cACdzC,eAAgB,IAElB,EAAKrB,SAAW,EAAKA,SAASf,KAAd,gBAChB,EAAKgB,YAAc,EAAKA,YAAYhB,KAAjB,gBACnB,EAAK8E,mBAAqB,EAAKA,mBAAmB9E,KAAxB,gBAC1B,EAAK+D,aAAe,EAAKA,aAAa/D,KAAlB,gBACpB,EAAKD,OAAS,EAAKA,OAAOC,KAAZ,gBAZG,E,4CAenB,SAASmB,GACP,IAAIO,EAASxB,KAAKL,MAAMuC,eACpBV,EAAOqD,MAAK,SAAAC,GAAW,OAAIA,EAAYpD,KAAOT,EAAMS,QAIxDF,EAAOuD,KAAK9D,GACZjB,KAAKG,SAAS,CAAC+B,eAAgBV,O,yBAGjC,SAAYP,GACV,IAAIO,EAASxB,KAAKL,MAAMuC,eACxBV,EAASA,EAAOwD,QAAO,SAAAC,GAAY,OAAIA,EAAavD,KAAOT,EAAMS,MAEjE1B,KAAKG,SAAS,CAAC+B,eAAgBV,M,gCAGjC,SAAmBL,GACjBnB,KAAKG,SAAS,CAACwE,aAAcxD,M,0BAG/B,WAAgB,IAAD,OACP2C,EAAY9D,KAAKL,MAAMuC,eAAeT,KAAI,SAAAR,GAAK,OAAIA,EAAM2C,OAC/DxB,EAAQyB,aAAa7D,KAAKL,MAAMgF,aAAcb,GAAWoB,MAAK,WAC5D,EAAK/E,SAAS,CACZwE,aAAc,eACdzC,eAAgB,U,oBAKtB,SAAOtC,GAAO,IAAD,OACXwC,EAAQvC,OAAOD,GAAMsF,MAAK,SAAArD,GACxB,EAAK1B,SAAS,CAAC0B,cAAeA,S,oBAIlC,WACE,OACE,gCACE,sCAAQ,sBAAMvB,UAAU,YAAhB,oBAAR,eACA,sBAAKA,UAAU,MAAf,UACE,cAAC,EAAD,CAAWL,SAAUD,KAAKH,SAC1B,sBAAKS,UAAU,eAAf,UACG,cAAC,EAAD,CAAeuB,cAAiB7B,KAAKL,MAAMkC,cAClCb,MAAOhB,KAAKa,WACrB,cAAC,EAAD,CACC8D,aAAc3E,KAAKL,MAAMgF,aACzBzC,eAAgBlC,KAAKL,MAAMuC,eAC3BhB,SAAUlB,KAAKc,YACfkB,aAAchC,KAAK4E,mBACnBzC,OAAUnC,KAAK6D,4B,GAnEXnD,IAAMC,WCGTwE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBH,MAAK,YAAkD,IAA/CI,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b38d61d2.chunk.js","sourcesContent":["let accessToken;\r\nconst clientId = 'e8d2eab50a794080817852bb3c576a62';\r\nconst redirectUri = 'http://localhost:3000';\r\n\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        console.log('Hello')\r\n        if (accessToken) {\r\n            return accessToken;\r\n        } \r\n\r\n        const regexOne = /access_token=([^&]*)/;\r\n        const regexTwo = /expires_in=([^&]*)/;\r\n        //check for access token match\r\n        const accessTokenMatch = window.location.href.match(regexOne);\r\n        const expiresInMatch = window.location.href.match(regexTwo);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            //This clears the parameters, allowing us to grab a new access token when it expires\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    // search(term) {\r\n    //     const accessToken = Spotify.getAccessToken();\r\n    //     return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, { \r\n    //         headers: {\r\n    //             Authorisation: `Bearer ${accessToken}`\r\n    //         }\r\n    //     }).then(response => {return response.json();\r\n    //     }).then(jsonResponse => {\r\n    //         if (!jsonResponse.tracks) {\r\n    //             return [];\r\n    //         }\r\n    //         return jsonResponse.tracks.items.map(track => ({\r\n    //             id: track.id,\r\n    //             name: track.name,\r\n    //             artist: track.artists[0].name,\r\n    //             album: track.album.name,\r\n    //             uri: track.uri\r\n    //         })\r\n    //         );\r\n    //     })\r\n    // },\r\n\r\n    async search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorisation: `Bearer ${accessToken}`\r\n            }\r\n        });\r\n        const jsonResponse = await response.json();\r\n        if (!jsonResponse.tracks) {\r\n            return [];\r\n        }\r\n        return jsonResponse.tracks.items.map(track => ({\r\n            id: track.id,\r\n            name: track.name,\r\n            artist: track.artists[0].name,\r\n            album: track.album.name,\r\n            uri: track.uri\r\n        })\r\n        );\r\n    },\r\n\r\n    // savePlaylist(name, trackUris) {\r\n    //     if (!name || !trackUris.length) {\r\n    //         return;\r\n    //     }\r\n\r\n    //     const accessToken = Spotify.getAccessToken();\r\n    //     const headers = { Authorisation: `Bearer ${accessToken}`};\r\n    //     let userId;\r\n\r\n    //     return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n    //     ).then(response => response.json()\r\n    //     ).then(jsonResponse => {\r\n    //         userId = jsonResponse.id;\r\n    //         return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n    //         {\r\n    //             headers: headers,\r\n    //             method: 'POST',\r\n    //             body: JSON.stringify({name: name})\r\n    //         }).then(response => response.json()\r\n    //         ).then(jsonResponse => {\r\n    //             const playlistId = jsonResponse.id;\r\n    //             return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n    //                 header: headers,\r\n    //                 method: 'POST',\r\n    //                 body: JSON.stringify({uris: trackUris})\r\n    //             })\r\n    //         })\r\n    //     })\r\n    // }\r\n\r\n    async savePlaylist(name, trackUris) {\r\n        if (!name || !trackUris.length) {\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorisation: `Bearer ${accessToken}`};\r\n        let userId;\r\n\r\n        const response = await fetch('https://api.spotify.com/v1/me', { headers: headers });\r\n        const jsonResponse = await response.json();\r\n        userId = jsonResponse.id;\r\n\r\n        const response_1 = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n            {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name })\r\n            });\r\n            \r\n        const jsonResponse_1 = await response_1.json();\r\n        const playlistId = jsonResponse_1.id;\r\n        return await fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n            header: headers,\r\n            method: 'POST',\r\n            body: JSON.stringify({ uris: trackUris })\r\n        });\r\n    }\r\n}\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            term: ''\r\n        }\r\n\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n    \r\n    search() {\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange (event) {\r\n        this.setState({term: event.target.value});\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\r\n                <button onClick={this.search} className=\"SearchButton\">SEARCH</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\nconstructor(props) {\r\n    super(props);\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n}\r\n\r\n    renderAction() {\r\n        if (this.props.isRemoval) {\r\n            return <button className=\"track-Action\" onClick={this.removeTrack}>-</button>\r\n        } else {\r\n            return <button className=\"track-Action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist}  | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport Track  from '../Track/Track';\r\nimport './Tracklist.css';\r\n\r\nclass Tracklist extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        return <Track track={track}\r\n                            key={track.id}\r\n                            onAdd={this.props.onAdd}\r\n                            onRemove={this.props.onRemove}\r\n                            isRemoval={this.props.isRemoval}/>\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Tracklist;","import React from 'react';\r\nimport TrackList from '../TrackList/TrackList';\r\nimport './SearchResults.css';\r\n\r\nclass SearchResults extends React.Component {\r\n    render () {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults}\r\n                        onAdd={this.props.onAdd}\r\n                        isRemoval={false}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport TrackList from '../TrackList/TrackList';\r\nimport './Playlist.css';\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n    \r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n    \r\n    render () {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input defaultValue= { 'New Playlist' }\r\n                    onChange={this.handleNameChange} />\r\n                <TrackList tracks={this.props.playlistTracks}\r\n                    onRemove={this.props.onRemove}\r\n                    isRemoval={true}/>\r\n                <button className=\"Playlist-save\" onClick = {this.props.onSave}\r\n                    >SAVE TO SPOTIFY\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\nimport './App.css'; \n\nimport SearchBar from '../SearchBar/SeachBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\n\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: \"My Playlist\",\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTracks => savedTracks.id === track.id)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Any <span className=\"highlight\">COLOUR</span> You Like</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/> \n          <div className=\"App-playlist\">\n             <SearchResults searchResults = {this.state.searchResults}\n                      onAdd={this.addTrack}/>\n             <Playlist \n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave = {this.savePlaylist}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}